openapi: 3.0.1
info:
  title: StoTeam's StaBanca!
  description: Un server per gestire l'applicazione StaBanca!
  termsOfService: https://youtu.be/dQw4w9WgXcQ?t=43
  contact:
    email: aaa@aaa.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  
  
externalDocs:
  description: Find out more about StoTeam
  url: https://github.com/StoTeam
 
  
servers:
- url: 127.0.0.1:8080


tags:
- name: carta
  description: Dati carte
    
- name: conto
  description: Dati Conto Corrente
  
- name: intestatario
  description: Dati Intestatario
  
- name: movimento
  description: Dati Conto Corrente
  
- name: prestito
  description: Everything about your Prestiti
  
  externalDocs:
    description: Find out more
    url: http://swagger.io
  
- name: user
  description: Operations about user
  
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
    
    
paths:
  /carta:
    post:
      tags:
      - carta
      summary: Crea una nuova carta
      operationId: addCarta
      requestBody:
        description: La carta da creare
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carta'
          application/xml:
            schema:
              $ref: '#/components/schemas/Carta'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
      
      
  /carta/{Id}:
    get:
      tags:
      - carta
      summary: Cerca carta per Id
      description: Ritorna una carta
      operationId: getCartaById
      parameters:
      - name: Id
        in: path
        description: ID della carta da ritornare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Carta'
            application/json:
              schema:
                $ref: '#/components/schemas/Carta'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Intestatario non trovato
          content: {}
      security:
      - api_key: []
      
    put:
      tags:
      - carta
      summary: Aggiorna una carta esistente
      operationId: updateCarta
      parameters:
      - name: Id
        in: path
        description: ID della carta da ritornare
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Aggiornamento carta esistente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carta'
          application/xml:
            schema:
              $ref: '#/components/schemas/Carta'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Carta non trovato
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
    
    delete:
      tags:
      - carta
      summary: Elimina una carta
      operationId: deleteCarta
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: Id
        in: path
        description: Id della carta da eliminare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Carta non trovata
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets

 
  /conto:
    post:
      tags:
      - conto
      summary: Crea un conto
      operationId: createConto
      requestBody:
        description: Creazione di un nuovo conto.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Conto'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Conto'
            application/json:
              schema:
                $ref: '#/components/schemas/Conto'
        400:
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
 
  /conto/{Id}:
    get:
      tags:
      - conto
      summary: Trova il conto tramite Id
      description: For valid response try integer IDs
      operationId: getContoById
      parameters:
      - name: Id
        in: path
        description: ID del conto da trovare
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Conto'
            application/json:
              schema:
                $ref: '#/components/schemas/Conto'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Conto non trovato
          content: {}
    
    delete:
      tags:
      - conto
      summary: Elimina il conto
      description: For valid response try integer IDs with positive integer value.
      operationId: deleteOrder
      parameters:
      - name: Id
        in: path
        description: ID del conto da eliminare
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Conto non trovato
          content: {}
    
    put:
      tags:
      - conto
      summary: Aggiorna un conto esistente
      operationId: updateConto
      parameters:
      - name: Id
        in: path
        description: ID of the conto that needs to be updated
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      requestBody:
        description: L'oggetto conto da aggiornare
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conto'
          application/xml:
            schema:
              $ref: '#/components/schemas/Conto'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body

  /intestatario:
    post:
      tags:
      - intestatario
      summary: Crea un nuovo intestatario
      operationId: addIntestatario
      requestBody:
        description: L'intestatario da creare
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intestatario'
          application/xml:
            schema:
              $ref: '#/components/schemas/Intestatario'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
      
      
  /intestatario/{Id}:
    get:
      tags:
      - intestatario
      summary: Cerca intestatario per Id
      description: Ritorna un intestatario
      operationId: getIntestatarioById
      parameters:
      - name: Id
        in: path
        description: ID dell'intestatario da ritornare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Intestatario'
            application/json:
              schema:
                $ref: '#/components/schemas/Intestatario'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Intestatario non trovato
          content: {}
      security:
      - api_key: []
      
    put:
      tags:
      - intestatario
      summary: Aggiorna un intestatario esistente
      operationId: updateIntestatario
      parameters:
      - name: Id
        in: path
        description: ID dell'intestatario da ritornare
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Aggiornamento intestatario esistente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intestatario'
          application/xml:
            schema:
              $ref: '#/components/schemas/Intestatario'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Intestatario non trovato
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
    
    delete:
      tags:
      - intestatario
      summary: Elimina un intestatario
      operationId: deleteIntestatario
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: Id
        in: path
        description: Id dellintestatario da eliminare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Intestatario non trovato
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  
  
  /movimento:
    post:
      tags:
      - movimento
      summary: Chiedi un nuovo Prestito
      operationId: addPet
      requestBody:
        description: Il prestito da creare
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movimento'
          application/xml:
            schema:
              $ref: '#/components/schemas/Movimento'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
  
  
  /movimento/{Id}:
    get:
      tags:
      - movimento
      summary: Cerca movimento per Id
      description: Ritorna un movimento
      operationId: getMovimentoById
      parameters:
      - name: Id
        in: path
        description: ID del movimento da ritornare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Movimento'
            application/json:
              schema:
                $ref: '#/components/schemas/Movimento'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Movimento non trovato
          content: {}
      security:
      - api_key: []
    
    put:
      tags:
      - movimento
      summary: Aggiorna un movimento
      operationId: updateMovimentoWithForm
      parameters:
      - name: Id
        in: path
        description: ID del movimento da aggiornare
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/xml:
              schema:
                $ref: '#/components/schemas/Movimento'
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    
    delete:
      tags:
      - movimento
      summary: Elimina un movimento
      operationId: deleteMovimento
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: Id
        in: path
        description: Id del movimento da eliminare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Prestito non trovato
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  
  
  /prestito:
    post:
      tags:
      - prestito
      summary: Crea un nuovo prestito
      operationId: addPrestito
      requestBody:
        description: Il prestito da creare
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prestito'
          application/xml:
            schema:
              $ref: '#/components/schemas/Prestito'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
  
  
  /prestito/{Id}:
    get:
      tags:
      - prestito
      summary: Cerca prestito per Id
      description: Ritorna un prestito
      operationId: getPrestitoById
      parameters:
      - name: Id
        in: path
        description: ID del prestito da ritornare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Prestito'
            application/json:
              schema:
                $ref: '#/components/schemas/Prestito'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Prestito non trovato
          content: {}
      security:
      - api_key: []
   
    put:
      tags:
      - prestito
      summary: Aggiorna un prestito
      operationId: updatePrestitoWithForm
      parameters:
      - name: Id
        in: path
        description: ID del prestito da aggiornare
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                dovuti:
                  type: number
                  description: Soldi dovuti alla banca
                pagati:
                  type: number
                  description: Soldi pagati alla banca
                tan:
                  type: number
                  description: Interessi TAN
                taeg:
                  type: number
                  description: TAEG
                data_rata:
                  type: string
                  description: La data di scadenza della prossima rata
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  
    delete:
      tags:
      - prestito
      summary: Elimina un prestito
      operationId: deletePrestito
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: Id
        in: path
        description: Id del prestito da eliminare
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Prestito non trovato
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      
      
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'Application/JSON':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
      
 
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The user mail for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  
  
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  
  
  /user/{id}:
    get:
      tags:
      - user
      summary: Get user by id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: 'The id that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: id not found
          content: {}
      x-codegen-request-body-name: body
    
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: User not found
          content: {}


components:
  schemas:
    Conto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        codice_conto:
          type: integer
          format: int64
        iban:
          type: string
        saldo:
          type: number
        saldo_contabile:
          type: number
        id_intestatario:
          type: integer
      xml:
        name: Conto
    
    Movimento:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tipo_movimento:
          type: string
        importo:
          type: number
        conto_id_m:
          type: integer
          format: int64
        data_esecuzione:
          type: string
        conto_id_i:
          type: integer
          format: int64
        data_arrivo:
          type: string
        causale:
          type: string
        carta_id:
          type: integer
          format: int64
      xml:
        name: Movimento
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nome:
          type: string
        cognome:
          type: string
        telefono:
          type: string
        email:
          type: string
        tipo_utente:
          type: string
        indirizzo:
          type: string
        codice_fiscale:
          type: string
        partita_iva:
          type: string
        ragione_sociale:
          type: string
        id_intestatario:
          type: integer
          format: int64
        livello_accesso:
          type: string
        area_competenza:
          type: string
      xml:
        name: User
    
    Carta:
      type: object
      properties:
        id:
          type: integer
          format: int64
        is_block:
          type: boolean
        spesa_mensile:
          type: number
        data_rilascio:
          type: string
        data_scadenza:
          type: string
        codice_sicurezza:
          type: string
        pin:
          type: string
        limite:
          type: number
        disponibilita:
          type: number
        uso_pin:
          type: boolean
        conto_id:
          type: integer
      xml:
        name: Carta
    
    Intestatario:
      type: object
      properties:
        id:
          type: integer
          format: int64
      xml:
        name: Intestatario
    
    Prestito:
      type: object
      properties:
        id:
          type: integer
          format: int64
        importo:
          type: number
        dovuti:
          type: number
        pagati:
          type: number
        tan:
          type: number
        taeg:
          type: number
        tempo:
          type: integer
          format: int64
        is_fisso:
          type: boolean
        is_approvato:
          type: boolean
        data_inizio:
          type: string
        data_fine:
          type: string
        data_rata:
          type: string
        conto_id:
          type: integer
          format: int64
      xml:
        name: Prestito
    
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
